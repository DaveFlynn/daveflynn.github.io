I"V<p>After youâ€™ve transformed the data in your data warehouse and sent it on its way, you might think that your job is done. That is, until you get a call that thereâ€™s missing data, an unexpected schema change, or some data drift or outlier has been introduced. To understand when these issues might have occurred, you need some form of data observability in your pipeline.</p>

<p>Data observability means that you can monitor the data moving through the pipeline, be alerted to any changes or issues with the data structure, and compare data to help visualize change and aid in tracking down issues.</p>

<p>With the open-source data observability toolkit, PipeRider, you can add data observability to your data source and start understanding more about your data in minutes with:</p>

<ul>
  <li>Non-intrusive implementation - Focus on understanding your data, not changing it</li>
  <li>Data profiling - In-depth analysis of the structure of your data source</li>
  <li>Data assertions - Ensure your data stays within acceptable ranges through testing</li>
  <li>HTML report - The data profile and testing results are exported to an HTML report</li>
</ul>

<h2 id="1-install-piperider">1. Install PipeRider</h2>

<p>PipeRider is installed via pip:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">piperider</span>
</code></pre></div></div>

<p>By default it comes with SQLite, but the following connectors are also available:</p>

<ul>
  <li>Postgres</li>
  <li>Snowflake</li>
  <li>BigQuery</li>
  <li>Redshift</li>
  <li>dbt (with one of the supported connectors)</li>
  <li>duckdb (coming soon)</li>
  <li>CSV (coming soon)</li>
  <li>Parquet (coming soon)</li>
</ul>

<p>Install PipeRider with a connector like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="s">'piperider[postgres,snowflake]'</span>
</code></pre></div></div>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/vZVHo09fD-c" frameborder="0" allowfullscreen=""></iframe></div>

<p>You donâ€™t always have the luxury of a complete dataset, and thatâ€™s not always a bad thing â€” there are some cases in which a certain amount of missing data, or null values, can be acceptable in a data source.</p>

<h2>Missing data? No problem</h2>

<p>Let's say you have some incomplete data in a sales database and, even so, you still need to perform some calculations based on the data. You might be willing to allow a certain percentage of missing values before worrying about it affecting your results.</p>

<p>PipeRider has built-in assertions for testing if a column does not contain nulls, or that a it must be null, but there is no middle-ground for allowing for a certain quantity of nulls â€” custom assertions to the rescue!</p>

<p>Here's a code test:</p>

<p>You can write regular <a href="http://markdowntutorial.com/">markdown</a> here and Jekyll will automatically convert it to a nice webpage.  I strongly encourage you to <a href="http://markdowntutorial.com/">take 5 minutes to learn how to write in markdown</a> - itâ€™ll teach you how to transform regular text into bold/italics/headings/tables/etc.</p>

<p><strong>Here is some bold text</strong></p>

<h2 id="here-is-a-secondary-heading">Here is a secondary heading</h2>

<p>Hereâ€™s a useless table:</p>

<table class="table">
  <thead>
    <tr>
      <th scope="col">Number</th>
      <th scope="col">Next number</th>
      <th scope="col">Previous number </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">1</th>
      <td>Five</td>
      <td>Six</td>
      <td>Four</td>
    </tr>
    <tr>
      <th scope="row">2</th>
      <td>Ten</td>
      <td>Eleven</td>
      <td>Nine</td>
    </tr>
    <tr>
      <th scope="row">3</th>
      <td>Seven</td>
      <td>Eight</td>
      <td>Six</td>
    </tr>
  </tbody>
</table>

<p><img src="/img/posts/06.jpg" alt="foo" /></p>

<p>How about a yummy crepe?</p>

<p><img src="https://s3-media3.fl.yelpcdn.com/bphoto/cQ1Yoa75m2yUFFbY2xwuqw/348s.jpg" alt="Crepe" /></p>

<p>It can also be centered!</p>

<p><img src="https://s3-media3.fl.yelpcdn.com/bphoto/cQ1Yoa75m2yUFFbY2xwuqw/348s.jpg" alt="Crepe" class="mx-auto d-block" /></p>

<p>Hereâ€™s a code chunk:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var foo = function(x) {
  return(x + 5);
}
foo(3)
</code></pre></div></div>

<p>And here is the same code with syntax highlighting:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">foo</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p>And here is the same code yet again but with line numbers:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">foo</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="boxes">Boxes</h2>
<p>You can add notification, warning and error boxes like this:</p>

<h3 id="notification">Notification</h3>

<p class="alert alert-primary"><strong>Note:</strong> This is a primary alert box.</p>

<h3 id="warning">Warning</h3>

<p class="alert alert-warning"><strong>Warning:</strong> This is a warning box.</p>

<h3 id="error">Error</h3>

<p class="alert alert-danger"><strong>Error:</strong> This is an error box.</p>

:ET